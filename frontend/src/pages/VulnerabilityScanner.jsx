import React, { useState } from "react";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { MagnifyingGlassIcon, ArrowPathIcon, DocumentDuplicateIcon } from "@heroicons/react/24/outline";

// Import the code snippets with corrected paths
import JenkinsfileContent from "../configs/Jenkinsfile";
import GitLabCIContent from "../configs/GitlabCi";
import GitHubActionsContent from "../configs/GithubActions";

const GitHubScanner = ({ setResult, isLoading, setIsLoading }) => {
  const [url, setUrl] = useState("");

  const scanWebsite = async () => {
    if (!url || !url.includes("github.com")) {
      toast.warn("Veuillez entrer une URL de dépôt GitHub valide (ex. https://github.com/user/repo) !", {
        position: "top-right",
        autoClose: 3000,
        theme: "dark",
      });
      return;
    }

    setIsLoading(true);
    try {
      const response = await fetch("http://13.216.253.134:5000/scan", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ repo_url: url }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Erreur lors du scan du dépôt");
      }

      const data = await response.json();
      setResult(data);
      toast.success("Scan du dépôt terminé avec succès !", {
        position: "top-right",
        autoClose: 3000,
        theme: "dark",
      });
    } catch (error) {
      toast.error(error.message || "Erreur lors du scan du dépôt !", {
        position: "top-right",
        autoClose: 3000,
        theme: "dark",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="bg-gray-800 p-8 rounded-lg shadow-lg w-full max-w-2xl">
      <h2 className="text-2xl font-bold text-gray-100 mb-6 flex items-center gap-2">
        <MagnifyingGlassIcon className="h-7 w-7 text-green-400" />
        Scan de Vulnérabilités - Dépôts GitHub
      </h2>
      <div className="relative mb-6">
        <label htmlFor="github-url" className="text-gray-400 text-sm mb-2 block">
          URL du dépôt GitHub :
        </label>
        <input
          id="github-url"
          type="text"
          placeholder="URL du dépôt GitHub (ex. https://github.com/user/repo)"
          value={url}
          onChange={(e) => setUrl(e.target.value)}
          className="w-full pl-10 pr-4 py-3 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition duration-200 placeholder-gray-400"
        />
        <span className="absolute left-3 top-12 transform -translate-y-1/2 text-gray-400">
          <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 0C5.37 0 0 5.37 0 12c0 5.3 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61-.546-1.385-1.333-1.756-1.333-1.756-1.09-.745.083-.73.083-.73 1.205.135 1.838 1.24 1.838 1.24 1.065 1.885 2.876 1.34 3.578 1.025.112-.795.434-1.34.792-1.645-2.776-.315-5.686-1.385-5.686-6.165 0-1.365.487-2.48 1.287-3.355-.13-.315-.558-1.585.123-3.305 0 0 1.05-.335 3.44 1.285A12.01 12.01 0 0112 4.8c1.065.005 2.135.145 3.14.43 2.39-1.62 3.435-1.285 3.435-1.285.685 1.72.255 2.99.125 3.305.805.875 1.285 1.99 1.285 3.355 0 4.795-2.915 5.845-5.695 6.155.445.385.84 1.145.84 2.31 0 1.665-.015 3.015-.015 3.42 0 .32.215.695.825.575C20.565 21.8 24 17.3 24 12c0-6.63-5.37-12-12-12z" />
          </svg>
        </span>
      </div>
      <button
        onClick={scanWebsite}
        disabled={isLoading}
        className={`w-full sm:w-auto bg-green-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-green-700 transition-colors duration-200 flex items-center justify-center gap-2 ${
          isLoading ? "opacity-50 cursor-not-allowed" : ""
        }`}
      >
        {isLoading ? (
          <>
            <ArrowPathIcon className="h-5 w-5 animate-spin" />
            Scan en cours...
          </>
        ) : (
          <>
            <MagnifyingGlassIcon className="h-5 w-5" />
            Scanner le dépôt
          </>
        )}
      </button>
    </div>
  );
};

const FileScanner = ({ setResult, isLoading, setIsLoading }) => {
  const [file, setFile] = useState(null);
  const [codeInput, setCodeInput] = useState("");

  const handleFileChange = (e) => {
    setFile(e.target.files[0]);
    setCodeInput(""); // Clear code input when a file is selected
  };

  const scanFile = async () => {
    if (!file && !codeInput.trim()) {
      toast.warn("Veuillez sélectionner un fichier ou entrer du code à scanner !", {
        position: "top-right",
        autoClose: 3000,
        theme: "dark",
      });
      return;
    }

    setIsLoading(true);
    try {
      let response;
      if (file) {
        // Handle file upload
        const formData = new FormData();
        formData.append("file", file);
        response = await fetch("http://54.81.86.127:5000/scan-file", {
          method: "POST",
          body: formData,
        });
      } else {
        // Handle code input
        response = await fetch("http://54.81.86.127:5000/scan-file", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ content: codeInput }),
        });
      }

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Erreur lors du scan du fichier");
      }

      const data = await response.json();
      setResult(data);
      toast.success("Scan terminé avec succès !", {
        position: "top-right",
        autoClose: 3000,
        theme: "dark",
      });
    } catch (error) {
      toast.error(error.message || "Erreur lors du scan !", {
        position: "top-right",
        autoClose: 3000,
        theme: "dark",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="bg-gray-800 p-8 rounded-lg shadow-lg w-full max-w-2xl">
      <h2 className="text-2xl font-bold text-gray-100 mb-6 flex items-center gap-2">
        <MagnifyingGlassIcon className="h-7 w-7 text-green-400" />
        Scan de Vulnérabilités - Fichier
      </h2>
      <div className="mb-6">
        <label htmlFor="code-input" className="text-gray-400 text-sm mb-2 block">
          Entrer le code du fichier :
        </label>
        <textarea
          id="code-input"
          value={codeInput}
          onChange={(e) => {
            setCodeInput(e.target.value);
            setFile(null); // Clear file when code is entered
          }}
          className="w-full h-32 p-4 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-green-500 placeholder-gray-400 transition-all duration-200 font-mono"
          placeholder="Entrez le contenu du fichier ici..."
        />
      </div>
      <div className="mb-6">
        <label htmlFor="file-upload" className="text-gray-400 text-sm mb-2 block">
          Ou sélectionner un fichier :
        </label>
        <input
          id="file-upload"
          type="file"
          onChange={handleFileChange}
          className="w-full text-gray-100 bg-gray-700 border border-gray-600 rounded-lg p-3 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-green-600 file:text-white hover:file:bg-green-700"
        />
      </div>
      <button
        onClick={scanFile}
        disabled={isLoading}
        className={`w-full sm:w-auto bg-green-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-green-700 transition-colors duration-200 flex items-center justify-center gap-2 ${
          isLoading ? "opacity-50 cursor-not-allowed" : ""
        }`}
      >
        {isLoading ? (
          <>
            <ArrowPathIcon className="h-5 w-5 animate-spin" />
            Scan en cours...
          </>
        ) : (
          <>
            <MagnifyingGlassIcon className="h-5 w-5" />
            Scanner
          </>
        )}
      </button>
    </div>
  );
};

const ZipScanner = ({ setResult, isLoading, setIsLoading }) => {
  const [zipFile, setZipFile] = useState(null);

  const handleZipChange = (e) => {
    setZipFile(e.target.files[0]);
  };

  const scanZip = async () => {
    if (!zipFile) {
      toast.warn("Veuillez sélectionner un fichier ZIP à scanner !", {
        position: "top-right",
        autoClose: 3000,
        theme: "dark",
      });
      return;
    }

    setIsLoading(true);
    try {
      const formData = new FormData();
      formData.append("zip", zipFile);

      const response = await fetch("http://54.81.86.127:5000/scan-zip", {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Erreur lors du scan du fichier ZIP");
      }

      const data = await response.json();
      setResult(data);
      toast.success("Scan du fichier ZIP terminé avec succès !", {
        position: "top-right",
        autoClose: 3000,
        theme: "dark",
      });
    } catch (error) {
      toast.error(error.message || "Erreur lors du scan du fichier ZIP !", {
        position: "top-right",
        autoClose: 3000,
        theme: "dark",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="bg-gray-800 p-8 rounded-lg shadow-lg w-full max-w-2xl">
      <h2 className="text-2xl font-bold text-gray-100 mb-6 flex items-center gap-2">
        <MagnifyingGlassIcon className="h-7 w-7 text-green-400" />
        Scan de Vulnérabilités - Dossier ZIP
      </h2>
      <div className="mb-6">
        <label htmlFor="zip-upload" className="text-gray-400 text-sm mb-2 block">
          Sélectionner un fichier ZIP :
        </label>
        <input
          id="zip-upload"
          type="file"
          accept=".zip"
          onChange={handleZipChange}
          className="w-full text-gray-100 bg-gray-700 border border-gray-600 rounded-lg p-3 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-green-600 file:text-white hover:file:bg-green-700"
        />
      </div>
      <button
        onClick={scanZip}
        disabled={isLoading}
        className={`w-full sm:w-auto bg-green-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-green-700 transition-colors duration-200 flex items-center justify-center gap-2 ${
          isLoading ? "opacity-50 cursor-not-allowed" : ""
        }`}
      >
        {isLoading ? (
          <>
            <ArrowPathIcon className="h-5 w-5 animate-spin" />
            Scan en cours...
          </>
        ) : (
          <>
            <MagnifyingGlassIcon className="h-5 w-5" />
            Scanner le dossier ZIP
          </>
        )}
      </button>
    </div>
  );
};

const ResultDisplay = ({ result }) => {
  if (!result) return null;

  return (
    <div className="mt-6 w-full max-w-2xl">
      <label htmlFor="scan-result" className="text-gray-400 text-sm mb-2 block">
        Résultat du scan :
      </label>
      {result.status === "success" ? (
        <div className="p-4 bg-gray-950 text-green-300 rounded-lg shadow-inner max-h-96 overflow-auto font-mono text-sm">
          <p className="text-green-400 font-semibold">Aucune vulnérabilité détectée ! ✅</p>
          <p>Statut : {result.status}</p>
          <p>Code de sortie : {result.exit_code}</p>
        </div>
      ) : result.status === "failed" && result.findings && result.findings.length > 0 ? (
        <div className="p-4 bg-gray-950 text-red-300 rounded-lg shadow-inner max-h-96 overflow-auto font-mono text-sm">
          <p className="text-red-400 font-semibold">Vulnérabilités détectées ! ⚠️</p>
          <p>Statut : {result.status}</p>
          <p>Code de sortie : {result.exit_code}</p>
          <p className="mt-2">Détails des vulnérabilités :</p>
          <ul className="list-disc list-inside mt-2">
            {result.findings.map((finding, index) => (
              <li key={index} className="mt-1">
                <span className="text-red-400">{finding.check_id}</span> - {finding.message} (Fichier : {finding.path}, Ligne : {finding.line}, Sévérité : {finding.severity})
              </li>
            ))}
          </ul>
        </div>
      ) : (
        <div className="p-4 bg-gray-950 text-red-300 rounded-lg shadow-inner max-h-96 overflow-auto font-mono text-sm">
          <p className="text-red-400 font-semibold">Erreur lors du scan ! ❌</p>
          <p>Statut : {result.status}</p>
          <p>Erreur : {result.error || "Erreur inconnue"}</p>
        </div>
      )}
    </div>
  );
};

const VulnerabilityScanner = () => {
  const [scanType, setScanType] = useState(null);
  const [result, setResult] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const resetScanner = () => {
    setScanType(null);
    setResult(null);
    setIsLoading(false);
  };

  const handleCopy = (content) => {
    navigator.clipboard.writeText(content)
      .then(() => {
        toast.success("Code copié avec succès !", {
          position: "top-right",
          autoClose: 2000,
          theme: "dark",
        });
      })
      .catch((err) => {
        toast.error("Erreur lors de la copie du code !", {
          position: "top-right",
          autoClose: 2000,
          theme: "dark",
        });
      });
  };

  const renderCode = () => {
    switch (scanType) {
      case "jenkinsfile":
        return (
          <div className="relative">
            <pre className="p-4 bg-gray-900 text-green-300 rounded-lg shadow-inner max-h-96 overflow-auto font-mono text-sm">
              Jenkinsfile:
              <code>{JenkinsfileContent}</code>
            </pre>
            <button
              onClick={() => handleCopy(JenkinsfileContent)}
              className="absolute top-2 right-2 bg-gray-700 text-white px-2 py-1 rounded hover:bg-gray-600 transition-colors duration-200 flex items-center gap-1"
            >
              <DocumentDuplicateIcon className="h-4 w-4" />
              Copier
            </button>
          </div>
        );
      case "gitlabci":
        return (
          <div className="relative">
            <pre className="p-4 bg-gray-900 text-green-300 rounded-lg shadow-inner max-h-96 overflow-auto font-mono text-sm">
              Gitlab CI/CD:
              <code>{GitLabCIContent}</code>
            </pre>
            <button
              onClick={() => handleCopy(GitLabCIContent)}
              className="absolute top-2 right-2 bg-gray-700 text-white px-2 py-1 rounded hover:bg-gray-600 transition-colors duration-200 flex items-center gap-1"
            >
              <DocumentDuplicateIcon className="h-4 w-4" />
              Copier
            </button>
          </div>
        );
      case "githubactions":
        return (
          <div className="relative">
            <pre className="p-4 bg-gray-900 text-green-300 rounded-lg shadow-inner max-h-96 overflow-auto font-mono text-sm">
              Github Actions:
              <code>{GitHubActionsContent}</code>
            </pre>
            <button
              onClick={() => handleCopy(GitHubActionsContent)}
              className="absolute top-2 right-2 bg-gray-700 text-white px-2 py-1 rounded hover:bg-gray-600 transition-colors duration-200 flex items-center gap-1"
            >
              <DocumentDuplicateIcon className="h-4 w-4" />
              Copier
            </button>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="h-full items-center justify-center flex flex-col">
      {!scanType ? (
        <div className="p-8 w-full max-w-2xl">
          <h2 className="text-2xl font-bold text-gray-100 mb-6 flex items-center gap-2">
            <MagnifyingGlassIcon className="h-7 w-7 text-green-400" />
            Sélectionner le type de scan
          </h2>
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
            <button
              onClick={() => setScanType("github")}
              className="bg-green-600 text-white px-4 py-3 rounded-lg font-semibold hover:bg-green-700 transition-colors duration-200 flex items-center justify-center gap-2"
            >
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 0C5.37 0 0 5.37 0 12c0 5.3 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61-.546-1.385-1.333-1.756-1.333-1.756-1.09-.745.083-.73.083-.73 1.205.135 1.838 1.24 1.838 1.24 1.065 1.885 2.876 1.34 3.578 1.025.112-.795.434-1.34.792-1.645-2.776-.315-5.686-1.385-5.686-6.165 0-1.365.487-2.48 1.287-3.355-.13-.315-.558-1.585.123-3.305 0 0 1.05-.335 3.44 1.285A12.01 12.01 0 0112 4.8c1.065.005 2.135.145 3.14.43 2.39-1.62 3.435-1.285 3.435-1.285.685 1.72.255 2.99.125 3.305.805.875 1.285 1.99 1.285 3.355 0 4.795-2.915 5.845-5.695 6.155.445.385.84 1.145.84 2.31 0 1.665-.015 3.015-.015 3.42 0 .32.215.695.825.575C20.565 21.8 24 17.3 24 12c0-6.63-5.37-12-12-12z" />
              </svg>
              Dépôt GitHub
            </button>
            <button
              onClick={() => setScanType("file")}
              className="bg-green-600 text-white px-4 py-3 rounded-lg font-semibold hover:bg-green-700 transition-colors duration-200 flex items-center justify-center gap-2"
            >
              <MagnifyingGlassIcon className="h-5 w-5" />
              Fichier unique
            </button>
            <button
              onClick={() => setScanType("zip")}
              className="bg-green-600 text-white px-4 py-3 rounded-lg font-semibold hover:bg-green-700 transition-colors duration-200 flex items-center justify-center gap-2"
            >
              <MagnifyingGlassIcon className="h-5 w-5" />
              Dossier ZIP
            </button>
            <button
              onClick={() => setScanType("jenkinsfile")}
              className="bg-green-600 text-white px-4 py-3 rounded-lg font-semibold hover:bg-green-700 transition-colors duration-200 flex items-center justify-center gap-2"
            >
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm0 2c5.514 0 10 4.486 10 10s-4.486 10-10 10S2 17.514 2 12 6.486 2 12 2zm0 3a1 1 0 00-1 1v4H8a1 1 0 100 2h3v4a1 1 0 102 0v-4h3a1 1 0 100-2h-3V6a1 1 0 00-1-1z" />
              </svg>
              Jenkinsfile
            </button>
            <button
              onClick={() => setScanType("githubactions")}
              className="bg-green-600 text-white px-4 py-3 rounded-lg font-semibold hover:bg-green-700 transition-colors duration-200 flex items-center justify-center gap-2"
            >
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 0C5.37 0 0 5.37 0 12c0 5.3 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61-.546-1.385-1.333-1.756-1.333-1.756-1.09-.745.083-.73.083-.73 1.205.135 1.838 1.24 1.838 1.24 1.065 1.885 2.876 1.34 3.578 1.025.112-.795.434-1.34.792-1.645-2.776-.315-5.686-1.385-5.686-6.165 0-1.365.487-2.48 1.287-3.355-.13-.315-.558-1.585.123-3.305 0 0 1.05-.335 3.44 1.285A12.01 12.01 0 0112 4.8c1.065.005 2.135.145 3.14.43 2.39-1.62 3.435-1.285 3.435-1.285.685 1.72.255 2.99.125 3.305.805.875 1.285 1.99 1.285 3.355 0 4.795-2.915 5.845-5.695 6.155.445.385.84 1.145.84 2.31 0 1.665-.015 3.015-.015 3.42 0 .32.215.695.825.575C20.565 21.8 24 17.3 24 12c0-6.63-5.37-12-12-12z" />
              </svg>
              GitHub Actions
            </button>
            <button
              onClick={() => setScanType("gitlabci")}
              className="bg-green-600 text-white px-4 py-3 rounded-lg font-semibold hover:bg-green-700 transition-colors duration-200 flex items-center justify-center gap-2"
            >
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M23.64 14.67l-1.31-4-2.09-6.36a.66.66 0 00-.63-.45.66.66 0 00-.63.45l-2.09 6.36h-4.18L10.62 4.31a.66.66 0 00-.63-.45.66.66 0 00-.63.45l-2.09 6.36H3.07L1.76 14.67a.66.66 0 00.24.81l9.55 6.95a.66.66 0 00.78 0l9.55-6.95a.66.66 0 00.24-.81zm-15.2-2.5l1.31-4 1.31 4H8.44zm7.12 0l1.31-4 1.31 4h-2.62z" />
              </svg>
              GitLab CI/CD
            </button>
          </div>
        </div>
      ) : (
        <>
          <div className="flex justify-end w-full max-w-2xl mb-4">
            <button
              onClick={resetScanner}
              className="bg-gray-600 text-white px-4 py-2 rounded-lg font-semibold hover:bg-gray-700 transition-colors duration-200"
            >
              Retour
            </button>
          </div>
          {scanType === "github" && (
            <GitHubScanner setResult={setResult} isLoading={isLoading} setIsLoading={setIsLoading} />
          )}
          {scanType === "file" && (
            <FileScanner setResult={setResult} isLoading={isLoading} setIsLoading={setIsLoading} />
          )}
          {scanType === "zip" && (
            <ZipScanner setResult={setResult} isLoading={isLoading} setIsLoading={setIsLoading} />
          )}
          {renderCode()}
          <ResultDisplay result={result} />
        </>
      )}
      <ToastContainer />
    </div>
  );
};

export default VulnerabilityScanner;