import React, { useState } from "react";
import { toast } from "react-toastify";
import { DocumentDuplicateIcon } from "@heroicons/react/24/outline";

const SemgrepResultDisplay = ({ result }) => {
  const [activeTab, setActiveTab] = useState("results"); // Default tab: Results

  if (!result || !result.results) {
    return <p className="text-gray-400">Aucun résultat disponible.</p>;
  }

  const handleCopy = () => {
    navigator.clipboard.writeText(JSON.stringify(result, null, 2)).then(() => {
      toast.success("Résultats copiés !", { position: "top-right", autoClose: 2000, theme: "light" });
    });
  };

  const renderResults = (results) => {
    // Handle single result
    const repoUrl = result.repo_url || "Source non définie";
    const repoName = repoUrl.includes("github.com") ? repoUrl.split("/").slice(-2).join("/") : repoUrl;

    return (
      <div className="mb-4">
        <h3 className="text-lg font-semibold text-gray-100">{repoName}</h3>
        {renderSingleResult(results)}
      </div>
    );
  };

  const renderSingleResult = (data) => {
    // Group failed checks by file_path
    const groupedChecks = {};
    (data.failed_checks || []).forEach((check) => {
      const filePath = check.file_path;
      if (!groupedChecks[filePath]) {
        groupedChecks[filePath] = [];
      }
      groupedChecks[filePath].push(check);
    });

    return renderGroupedResults(data, groupedChecks);
  };

  const renderGroupedResults = (results, groupedChecks) => {
    return (
      <div>
        {/* Summary */}
        <div className="mb-4">
          <p className="text-green-400">Vérifications réussies : {results.summary?.passed || 0}</p>
          <p className="text-red-400">Vérifications échouées : {results.summary?.failed || 0}</p>
        </div>

        {/* Tabs */}
        <div className="mb-4">
          <div className="flex border-b border-gray-700">
            <button
              className={`px-4 py-2 font-semibold ${
                activeTab === "results" ? "border-b-2 border-green-500 text-green-400" : "text-gray-400"
              }`}
              onClick={() => setActiveTab("results")}
            >
              Résultats
            </button>
            <button
              className={`px-4 py-2 font-semibold ${
                activeTab === "recommendations" ? "border-b-2 border-green-500 text-green-400" : "text-gray-400"
              }`}
              onClick={() => setActiveTab("recommendations")}
            >
              Recommandations
            </button>
          </div>
        </div>

        {/* Tab Content */}
        {activeTab === "results" && (
          <div>
            {results.failed_checks?.length > 0 && (
              <div className="mb-4">
                <h4 className="text-gray-100 font-semibold">Vérifications échouées :</h4>
                {Object.entries(groupedChecks).map(([filePath, checks]) => (
                  <div key={filePath} className="mt-4">
                    <h5 className="text-red-700 font-medium">----------------
                      {filePath}
                      ----------------</h5>
                    <ul className="list-disc list-inside text-gray-300">
                      {checks.map((check, idx) => (
                        <li key={idx}>
                          <span className="text-red-400">{check.check_id}</span> - {check.check_name} (Ligne : {check.file_line_range?.join("-")}, Sévérité : {check.severity})
                          <span className="block text-gray-400">{check.message}</span>
                          {check.guideline && (
                            <span>
                              , Guideline: <a href={check.guideline} className="text-blue-400" target="_blank" rel="noopener noreferrer">{check.guideline}</a>
                            </span>
                          )}
                        </li>
                      ))}
                    </ul>
                  </div>
                ))}
              </div>
            )}
            {results.passed_checks?.length > 0 && (
              <div className="mb-4">
                <h4 className="text-gray-100 font-semibold">Vérifications réussies :</h4>
                <ul className="list-disc list-inside text-gray-300">
                  {results.passed_checks.map((check, idx) => (
                    <li key={idx}>
                      <span className="text-green-400">{check.check_id}</span> - {check.check_name} (Fichier : {check.file_path}, Ligne : {check.file_line_range?.join("-")})
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        )}

        {activeTab === "recommendations" && (
          <div>
            {results.failed_checks?.length > 0 ? (
              Object.entries(groupedChecks).map(([filePath, checks]) => (
                <div key={filePath} className="mt-4">
                  <h5 className="text-red-700 font-medium">----------------{filePath}----------------</h5>
                  <ul className="list-disc list-inside text-gray-300">
                    {checks.map((check, idx) => (
                      <li key={idx} className="mb-2">
                        <span className="text-red-400">{check.check_id}</span> - {check.check_name} (Ligne : {check.file_line_range?.join("-")}, Sévérité : {check.severity})
                        <div className="text-slate-400 mt-1">Recommandation : {check.suggestion}</div>
                      </li>
                    ))}
                  </ul>
                </div>
              ))
            ) : (
              <p className="text-gray-400">Aucune recommandation disponible.</p>
            )}
          </div>
        )}

        {/* Scanned Files */}
        {results.files_found?.length > 0 && (
          <div className="mt-4">
            <h4 className="text-gray-100 font-semibold">Fichiers scannés :</h4>
            <ul className="list-disc list-inside text-gray-300">
              {results.files_found.map((file, idx) => (
                <li key={idx}>{file}</li>
              ))}
            </ul>
          </div>
        )}
      </div>
    );
  };

  return (
      <div className="mt-6 w-full max-w-5xl relative">
        <label htmlFor="semgrep-result" className="text-gray-400 text-sm mb-2 block">
          Résultat de la vérification Semgrep :
        </label>
        <div
            className="p-4 bg-slate-800 text-green-300 rounded-lg shadow-inner max-h-96 overflow-y-auto font-mono text-sm">
          {renderResults(result.results)}
        </div>
        <button
            onClick={handleCopy}
            className="absolute top-8 right-6 bg-gray-700 text-white px-2 py-1 rounded hover:bg-gray-600"
        >
          <DocumentDuplicateIcon className="h-4 w-4"/>
        </button>
      </div>
  );
};

export default SemgrepResultDisplay;